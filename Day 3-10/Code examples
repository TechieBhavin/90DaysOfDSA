the coding problem which i have learnt today

problem statement :  printing numbers from 0 to 3 
solution : 
class Recursion {
    static int cnt = 0;
    static void print(){
        
         // Base Condition.
         if(cnt == 3 ) return;
         System.out.println(cnt);

         // Count incremented.
         cnt = cnt+1;
         print();

    }
    public static void main(String[] args) {
        print();
    }
}

problem statement : Print Name N times using Recursion
solution : 
class printnamentimeusingrecursion {
    
    static void func(int i, int n){
        
            // Base Condition.
            if(i>n) return;
            System.out.println("Bhavin");

            // Function call to print till i increments.
            func(i+1,n);

    }
    public static void main(String[] args) {

       // Here, let’s take the value of n to be 4.
       int n = 4;
       func(1,n);
    }
}

problem statement : Print 1 to N using Recursion
solution (i) :
class Solution
{
 int i=0;   
  public void printNos(int N)
    {
        //Your code here
        i++;
        System.out.print(i+" ");
        if(i==N)return ;
        printNos(N);
        
        
    }
}
solution (ii) :
class Recursion {
    
    static void func(int i, int n){
        
            // Base Condition.
            if(i>n) return;
            System.out.println(i);

            // Function call to print i till i increments to n.
            func(i+1,n);

    }
    public static void main(String[] args) {

       // Here, let’s take the value of n to be 4.
       int n = 4;
       func(1,n);
    }
}
solution (iii) :
class Recursion {
    
    static void func(int i, int n){
        
            // Base Condition.
            if(i<1) return;
            
            // Function call to print(n-1) integers.
            func(i-1,n);
            System.out.println(i);

    }
    public static void main(String[] args) {

       // Here, let’s take the value of n to be 4.
       int n = 4;
       func(n,n);
    }
}  
the coding problem which i have learnt today

problem statement :  Given an instance of any problem P and data D corresponding to the instance, all the constraints that are to be satisfied for solving the problem as C. The backtracking algorithm will then be:

algorithm : [ the B.T. algorithm will be like this ]

    step 1 : The algorithm begins to build up a solution, starting with an empty solution set S. S = {}
    step 2 : All possible moves are added to S one by one. Firstly, we add to S the first move that is left. This now creates a new sub-tree s in the state space tree.
    step 3 : Check if S+s is valid by seeing if it satisfies each of the constraints defined in C.
        - If S+s is valid, then the sub-tree s is “eligible” to add more “children”.
        - Else, the entire sub-tree s is useless, so go back to step 1 using argument S.
    step 4 : In case of “eligibility” of the newly formed sub-tree s, go back to step 1 using argument S+s.
    step 5 : If S+s returns that it is a solution for the entire data D. Return the result and terminate the algorithm.
    step 6 : If not, then return that there doesn’t exist any possible solution for the current s and hence discard it.

problem statement : Consider a real life scenario. We have three boxes and we are told that only one of them has a gold coin in it and we do not know exactly which box has it. So, in order to identify which box has the coin, we will have no other option than opening all the boxes one by one.

solution : The first box is checked first. If it does not contain the coin, we close it and check the second box and so on until we find the coin. This is nothing but utilisation of backtracking algorithm in real life. It is the process of solving all sub-problems one by one to reach the best possible solution for any given problem.
